-- Find the top 10 Pokémon ranked by attack power
SELECT * FROM POKEMON
ORDER BY POKEMON.`ATK` DESC
LIMIT 10; 

--Find All Pokémon who is resistant against Steel
SELECT DISTINCT POKEMON.* FROM POKEMON,RESISTANT_TO
WHERE (
    POKEMON.PTYPE = RESISTANT_TO.STEEL
    OR 
    (POKEMON.PTYPE2 = RESISTANT_TO.STEEL AND POKEMON.PTYPE2 != NULL)
)

--, STRONG_AGAINST.GRASS, WEAK_AGAINST.FIRE 
SELECT DISTINCT POKEMON.* FROM POKEMON, STRONG_AGAINST, WEAK_AGAIsNST
WHERE 
    (
        (
            POKEMON.PTYPE = WEAK_AGAINST.FIRE 
            AND POKEMON.PTYPE = STRONG_AGAINST.GRASS 
        )
OR
        (
            POKEMON.PTYPE2 = WEAK_AGAINST.FIRE
            AND POKEMON.PTYPE2 = STRONG_AGAINST.GRASS
            AND POKEMON.PTYPE2 != NULL
        )
    )

-- Find All Pokémon who has a BST greater than 400 but is Vulnerable to Rock
SELECT DISTINCT POKEMON.* FROM POKEMON,VULNERABLE_TO
WHERE 
    ((POKEMON.BST > 400
    AND POKEMON.PTYPE = VULNERABLE_TO.ROCK)
OR
    (POKEMON.BST > 400
    AND POKEMON.PTYPE2 = VULNERABLE_TO.ROCK))


-- TOP POKEMON
-- RESISTANT TO FAIRY
-- STRONG AGAINST FAIRY

-- IF BST > CLEFAIRY THEN RETURN STATS OF OTHER POKEMON
-- ELSE RETURN STATS FOR CLEFAIRY
DROP TABLE IF EXISTS CLEF_CMP; -- DROP IF TABLE ALREADY EXISTS
CREATE TABLE CLEF_CMP(
    PokeID int NOT NULL ,
    Pokename varChar(255),
    `PType` varChar(255) NOT NULL ,
    PType2 varchar(255),
    HP int ,
    Atk int ,
    Def int ,
    SAt int ,
    SDf int ,
    Spd int ,
    BST int ,
    PRIMARY KEY (PokeID)
);
INSERT INTO CLEF_CMP
    SELECT *
    FROM POKEMON 
    WHERE POKEMON.Pokename = 'CLEFAIRY';

INSERT INTO CLEF_CMP
    SELECT DISTINCT POKEMON.*
    FROM POKEMON,STRONG_AGAINST,RESISTANT_TO
        WHERE 
            POKEMON.PTYPE = RESISTANT_TO.FAIRY 
            AND POKEMON.PTYPE = STRONG_AGAINST.FAIRY 
        OR
            POKEMON.PTYPE2 = RESISTANT_TO.FAIRY 
            AND POKEMON.PTYPE2 = STRONG_AGAINST.FAIRY
    ORDER BY POKEMON.BST DESC
    LIMIT 1;
    
SELECT * FROM CLEF_CMP
ORDER BY CLEF_CMP.BST DESC
LIMIT 1;